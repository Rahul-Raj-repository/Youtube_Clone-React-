{"version":3,"sources":["Components/SearchBar.js","Components/VideoDetail.js","Components/VideoItem.js","Components/VideoList.js","api/youtube.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchTerm","handleChange","event","setState","target","value","handleSubmit","onFormSubmit","props","preventDefault","Paper","elevation","style","padding","src","height","width","onSubmit","this","TextField","fullWidth","label","onChange","Component","VideoDetail","video","videoSrc","id","videoId","Fragment","className","frameBorder","title","Typography","variant","snippet","channelTitle","description","VideoItem","onVideoSelect","Grid","item","xs","display","alignItems","cursor","onClick","marginRight","alt","thumbnails","medium","url","VideoList","videos","listOfVideos","map","key","container","spacing","axios","create","baseURL","App","selectedVideo","a","youtube","get","params","part","maxResults","q","response","data","items","justify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42f9fb5d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {Paper, TextField} from '@material-ui/core'\r\n\r\nexport class SearchBar extends Component {\r\n\r\n    state={\r\n        searchTerm: \"\",\r\n    }\r\n\r\n    handleChange = (event)=>{\r\n        this.setState({ searchTerm: event.target.value})\r\n    }\r\n\r\n    handleSubmit = (event)=>{\r\n        const {searchTerm} = this.state;\r\n        const {onFormSubmit} = this.props;\r\n\r\n        onFormSubmit(searchTerm)\r\n\r\n        event.preventDefault()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Paper elevation={6} style={{padding: \"25px\"}}>\r\n                <img src=\"https://movastore.sgp1.digitaloceanspaces.com/commovastoreyoutubelite/appimage/youtube-lite-app-image-tfKKL.png\"\r\n                height=\"50px\" width=\"70px\"/>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <TextField fullWidth label=\"Search...\" onChange={this.handleChange}/>\r\n                </form>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar\r\n","import React from 'react'\r\nimport {Paper, Typography} from \"@material-ui/core\"\r\n\r\nfunction VideoDetail({video}) {\r\n\r\n    if(!video) return <div>Loading...</div>\r\n\r\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Paper elevation={6} style={{height:\"36%\", width:\"100%\"}}>\r\n                <iframe className=\"responsive-iframe\" frameBorder=\"0\" height=\"100%\" width=\"100%\" title=\"Video Player\"\r\n                src={videoSrc}/>\r\n            </Paper>\r\n            <Paper elevation={6} style={{padding: \"15px\"}}>\r\n                <Typography variant=\"h6\">{video.snippet.title} - {video.snippet.channelTitle}</Typography>\r\n                <Typography variant=\"subtitle1\">{video.snippet.channelTitle}</Typography>\r\n                <Typography variant=\"subtitle2\">{video.snippet.description}</Typography>\r\n            </Paper>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default VideoDetail\r\n","import React from 'react'\r\nimport {Grid, Paper, Typography} from \"@material-ui/core\"\r\n\r\nfunction VideoItem({video, onVideoSelect}) {\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Paper elevation={3} style={{display: \"flex\", alignItems: \"center\", cursor:\"pointer\"}}\r\n             onClick={()=>onVideoSelect(video)}>\r\n                <img className=\"img-responsive\" style={{marginRight: \"10px\"}} alt=\"thumbnail\"\r\n                src={video.snippet.thumbnails.medium.url} height=\"130px\" width=\"210px\"/>\r\n                <Typography variant=\"subtitle1\"><b>{video.snippet.title}</b></Typography>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default VideoItem\r\n","import React from 'react'\r\nimport {Grid} from \"@material-ui/core\"\r\nimport VideoItem from \"./VideoItem\"\r\n\r\nfunction VideoList({videos, onVideoSelect}) {\r\n\r\n    const listOfVideos = videos.map((video, id)=><VideoItem onVideoSelect={onVideoSelect} key={id} video={video}/>)\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n        {listOfVideos}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default VideoList\r\n","import axios from \"axios\"\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n})","import React, { Component } from 'react'\nimport './App.css';\nimport {Grid} from \"@material-ui/core\"\nimport SearchBar from \"./Components/SearchBar\"\nimport VideoDetail from \"./Components/VideoDetail\"\nimport VideoList from \"./Components/VideoList\"\n\nimport youtube from \"./api/youtube\"\n\nexport class App extends Component {\n\n  state={\n    videos: [],\n    selectedVideo: null,\n  }\n\n  onVideoSelect=(video)=>{\n   this.setState({selectedVideo: video})\n  }\n\n  componentDidMount(){\n    this.handleSubmit(\"Money Heist\")\n  }\n\n  handleSubmit= async (searchTerm)=>{\n    const response = await youtube.get(\"search\",{\n      params:{\n        part: \"snippet\",\n        maxResults: 10,\n        key: \"AIzaSyAxdvdRGGW8YOxSNmY1qL228I8uadZZG8U\",\n        q: searchTerm,\n      }\n    })\n    \n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[5]\n    })\n} \n\n  render() {\n    const {selectedVideo, videos} = this.state\n    return (\n      <Grid justify=\"center\" container spacing={0} >\n        <Grid item xs={11}>\n          <Grid container spacing={6} style={{padding: \"10px\"}}>\n            <Grid item xs={12}>\n              <SearchBar onFormSubmit={this.handleSubmit}/>\n            </Grid>\n            <div className=\"col-sm-8\">\n              <VideoDetail video={selectedVideo}/>\n            </div>\n            <div className=\"col-sm-4\">\n              <VideoList videos={videos} onVideoSelect={this.onVideoSelect}/>\n            </div>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}